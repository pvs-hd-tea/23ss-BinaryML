import os
import random
import hashlib
from tabulate import tabulate

MALWARE_DATASET_PATH_GOOD = './MalwareDataSet/sorel/good/'
MALWARE_DATASET_PATH_BAD = './MalwareDataSet/sorel/bad/'


# Function to read binary file and return its content as bytes
def read_binary_file(file_path):
    with open(file_path, 'rb') as file:
        content = file.read(5000)
    return content


# Function to split the data and add a new label
def split_and_label_data(data_list, directory, label, ratio):
    files = os.listdir(directory)
    random.shuffle(files)
    num_files = len(files)
    split_point_1 = int(ratio[0] * num_files)
    split_point_2 = int((ratio[0] + ratio[1]) * num_files)

    for i, file_name in enumerate(files):
        file_path = os.path.join(directory, file_name)
        if os.path.isfile(file_path):
            file_data = {
                'Example': str(read_binary_file(file_path)),
                'Label': label,
                'GoodOrBad': label,
                'Testcase': [file_path],
                'Keep': True
            }
            if i < split_point_1:
                file_data['Split'] = 'Training'
            elif i < split_point_2:
                file_data['Split'] = 'Validation'
            else:
                file_data['Split'] = 'Test'
            data_list.append(file_data)


def stats(data_list):
    # Calculate statistics
    num_good_files = sum(1 for data in data_list if data['Label'] == 'Good')
    num_bad_files = sum(1 for data in data_list if data['Label'] == 'Bad')

    num_training_files = sum(1 for data in data_list if data['Split'] == 'Training')
    num_validation_files = sum(1 for data in data_list if data['Split'] == 'Validation')
    num_test_files = sum(1 for data in data_list if data['Split'] == 'Test')

    num_good_training_files = sum(1 for data in data_list if data['Label'] == 'Good' and data['Split'] == 'Training')
    num_bad_training_files = sum(1 for data in data_list if data['Label'] == 'Bad' and data['Split'] == 'Training')

    num_good_validation_files = sum(
        1 for data in data_list if data['Label'] == 'Good' and data['Split'] == 'Validation')
    num_bad_validation_files = sum(1 for data in data_list if data['Label'] == 'Bad' and data['Split'] == 'Validation')

    num_good_test_files = sum(1 for data in data_list if data['Label'] == 'Good' and data['Split'] == 'Test')
    num_bad_test_files = sum(1 for data in data_list if data['Label'] == 'Bad' and data['Split'] == 'Test')

    # Print statistics in a table
    table = [
        ["Total Good Files", num_good_files],
        ["Total Bad Files", num_bad_files],
        ["", ""],
        ["Total Training Files", num_training_files],
        ["Total Validation Files", num_validation_files],
        ["Total Test Files", num_test_files],
        ["", ""],
        ["Good Files in Training", num_good_training_files],
        ["Bad Files in Training", num_bad_training_files],
        ["", ""],
        ["Good Files in Validation", num_good_validation_files],
        ["Bad Files in Validation", num_bad_validation_files],
        ["", ""],
        ["Good Files in Test", num_good_test_files],
        ["Bad Files in Test", num_bad_test_files]
    ]

    table_title = "Malware Dataset Statistics"
    print(table_title.center(60))
    print(tabulate(table, headers=["Statistic", "Count"], tablefmt="fancy_grid"))


def load_malware_dataset_files():
    # Initialize a list to store dictionaries
    data_list = []

    # Split and label the 'good' directory
    split_and_label_data(data_list, MALWARE_DATASET_PATH_GOOD, 'Good', [0.8, 0.1, 0.1])

    # Split and label the 'bad' directory
    split_and_label_data(data_list, MALWARE_DATASET_PATH_BAD, 'Bad', [0.8, 0.1, 0.1])

    # Shuffle the combined data
    random.shuffle(data_list)
    stats(data_list)
    return data_list


def load_malware_data():
    print("Loading Binary Files from Malware Dataset\n")
    input = {}
    input["cwes"] = []
    input["label_encoding"] = {'Bad': 1, 'Good': 0}
    input["initial_config"] = {'label_strategy': 'BINARYCLASSIFICATION', 'model_name': 'microsoft/codebert-base',
                               'seed': 985674720}

    input["examples"] = load_malware_dataset_files()
    all_file_paths = [example['Testcase'][0] for example in input["examples"]]
    func_var_count = 1
    input["testcases"] = [{}]
    input["cwes"] = [{}]
    for file in all_file_paths:
        input_testcase = {"Files": [file], "Valid": True,
                          "FunctionalVariant": 'Malware-func-var-' + str(func_var_count), "FlowVariant": func_var_count,
                          "Weakness": {'Path': file, 'WeaknessID': func_var_count,
                                       'WeaknessShortenedName': 'Malware-func-var-' + str(func_var_count)}}
        input["testcases"].append(input_testcase)
        input['cwes'].append({'Path': file, 'WeaknessID': func_var_count,
                              'WeaknessShortenedName': 'Malware-func-var-' + str(func_var_count)})
        func_var_count = func_var_count + 1
    input["testcases"].pop(0)
    input["cwes"].pop(0)
    return input
