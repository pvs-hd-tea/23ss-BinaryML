import datetime

import torch

from initializations import *
from binary_loader import BinaryDataset, pad_collate_func


def printf(message):
    timestamp = datetime.datetime.now()
    timestamp_str = timestamp.strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp_str}] {message}")


def load_dataset(batch_size, max_seq_len=256, shuffle=True, num_workers=0):
    if TRAIN:
        train_set = BinaryDataset(
            good_dir=TRAIN_DATA_PATH_GOOD,
            bad_dir=TRAIN_DATA_PATH_BAD,
            max_len=max_seq_len)

        train_loader = torch.utils.data.DataLoader(train_set,
                                                   batch_size=batch_size,
                                                   shuffle=shuffle,
                                                   num_workers=num_workers,
                                                   collate_fn=pad_collate_func,
                                                   drop_last=True)

        validation_set = BinaryDataset(
            good_dir=VALIDATION_DATA_PATH_GOOD,
            bad_dir=VALIDATION_DATA_PATH_BAD,
            max_len=max_seq_len)

        validation_loader = torch.utils.data.DataLoader(validation_set,
                                                        batch_size=batch_size,
                                                        shuffle=shuffle,
                                                        num_workers=num_workers,
                                                        collate_fn=pad_collate_func,
                                                        drop_last=True)

        return train_loader, validation_loader, len(train_set), len(validation_set)

    elif TEST:
        # Testing: load test data set only
        test_set = BinaryDataset(
            good_dir=TEST_DATA_PATH_GOOD,
            bad_dir=TEST_DATA_PATH_BAD,
            max_len=max_seq_len)

        test_loader = torch.utils.data.DataLoader(test_set,
                                                  batch_size=batch_size,
                                                  shuffle=shuffle,
                                                  num_workers=num_workers,
                                                  collate_fn=pad_collate_func,
                                                  drop_last=True)

        return test_loader, len(test_set)

    elif PREDICT:
        test_set = BinaryDataset(
            good_dir=TEST_DATA_PATH_GOOD + "temp",
            bad_dir=TEST_DATA_PATH_BAD + "temp",
            max_len=max_seq_len)

        test_loader = torch.utils.data.DataLoader(test_set,
                                                  batch_size=batch_size,
                                                  shuffle=shuffle,
                                                  num_workers=num_workers,
                                                  collate_fn=pad_collate_func,
                                                  drop_last=True)

        return test_loader, len(test_set)


try:
    if TRAIN:
        printf(f"Parameter selected: TRAIN")
        batch_size = 256
        if SMOKE_TEST:
            batch_size = 16
        train, validation, num_train_samples, num_validation_samples = load_dataset(batch_size=batch_size, max_seq_len=256,
                                                                                    shuffle=True, num_workers=0)

        printf(f"Number of training samples: {num_train_samples}")
        printf(f"Number of validation samples: {num_validation_samples}\n")

        if not SMOKE_TEST:
            printf("Printing training set data...")
            for x, y in train:
                printf(type(x))
                printf(x.shape)
                printf(y.shape)
                printf(x)
                printf(y)
                break

            print()
            printf("Printing validation set data...")
            for x, y in validation:
                printf(type(x))
                printf(x.shape)
                printf(y.shape)
                printf(x)
                printf(y)
                break

    elif TEST:

        printf(f"Parameter selected: TEST")
        batch_size = 256
        if SMOKE_TEST:
            batch_size = 16
        test, num_test_samples = load_dataset(batch_size=batch_size, max_seq_len=256, shuffle=True,
                                              num_workers=0)

        printf(f"Number of test data samples: {num_test_samples}")
        if not SMOKE_TEST:
            printf("Printing test set data...")
            for x, y in test:
                printf(type(x))
                printf(x.shape)
                printf(y.shape)
                printf(x)
                printf(y)
                break

except Exception as ex:
    if ex.args[0] == 'num_samples should be a positive integer value, but got num_samples=0':
        printf("No file or folder found for one or all of the specified dataset paths")
        raise Exception(FileNotFoundError)
    else:
        raise ex
