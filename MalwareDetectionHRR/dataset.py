import datetime

import torch

from binaryLoader import BinaryDataset, pad_collate_func


def printf(message):
    timestamp = datetime.datetime.now()
    timestamp_str = timestamp.strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp_str}] {message}")


def load_dataset(batch_size, max_seq_len=256, shuffle=True, num_workers=0):
    train_set = BinaryDataset(
        good_dir='/home/pavan/Documents/VulnDataSet/Train/good/',
        bad_dir='/home/pavan/Documents/VulnDataSet/Train/bad/',
        max_len=max_seq_len)

    train_loader = torch.utils.data.DataLoader(train_set,
                                               batch_size=batch_size,
                                               shuffle=shuffle,
                                               num_workers=num_workers,
                                               collate_fn=pad_collate_func,
                                               drop_last=True)

    test_set = BinaryDataset(
        good_dir='/home/pavan/Documents/VulnDataSet/Test/good/',
        bad_dir='/home/pavan/Documents/VulnDataSet/Test/bad/',
        max_len=max_seq_len)

    test_loader = torch.utils.data.DataLoader(test_set,
                                              batch_size=batch_size,
                                              shuffle=shuffle,
                                              num_workers=num_workers,
                                              collate_fn=pad_collate_func,
                                              drop_last=True)

    return train_loader, test_loader, len(train_set), len(test_set)


def load_test_dataset(batch_size, max_seq_len=256, shuffle=True, num_workers=0):
    test_set = BinaryDataset(
        good_dir='test/benign/',
        bad_dir='test/vulnerability/',
        max_len=max_seq_len)

    test_loader = torch.utils.data.DataLoader(test_set,
                                              batch_size=batch_size,
                                              shuffle=shuffle,
                                              num_workers=num_workers,
                                              collate_fn=pad_collate_func,
                                              drop_last=True)

    return test_loader

train, test, num_train_samples, num_test_samples = load_dataset(batch_size=256, max_seq_len=256, shuffle=True, num_workers=0)

printf(f"Number of training samples: {num_train_samples}")
printf(f"Number of testing samples: {num_test_samples}\n")

printf("Printing Train Data...")
for x, y in train:
    printf(type(x))
    printf(x.shape)
    printf(y.shape)
    printf(x)
    printf(y)
    break

print()
printf("Printing Test Data...")
for x, y in test:
    printf(type(x))
    printf(x.shape)
    printf(y.shape)
    printf(x)
    printf(y)
    break